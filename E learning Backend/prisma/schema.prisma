generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(uuid())
  fullName          String
  email             String        @unique
  password          String
  role              Role          @default(STUDENT)
  isVerified        Boolean       @default(false)
  status            AccountStatus @default(ACTIVE)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  verificationToken String?

  enrollments  Enrollment[]
  courses      Course[]      @relation("InstructorCourses")
  progress     Progress[]
  reviews      Review[]
  quizAttempts QuizAttempt[]
  Certificate  Certificate[]
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum AccountStatus {
  ACTIVE
  PENDING
  BANNED
}

model Course {
  id           String       @id @default(uuid())
  iconImage    String      @default("course_image_icon.png")
  title        String
  description  String
  level        Difficulty
  category     String
  status       CourseStatus @default(DRAFT)
  instructorId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  instructor  User          @relation("InstructorCourses", fields: [instructorId], references: [id])
  modules     Module[]
  enrollments Enrollment[]
  reviews     Review[]
  Quiz        Quiz[]
  Certificate Certificate[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Module {
  id       String   @id @default(uuid())
  title    String
  courseId String
  course   Course   @relation(fields: [courseId], references: [id])
  lessons  Lesson[]
}

model Lesson {
  id         String        @id @default(uuid())
  title      String
  content    String // Can be text, video URL, or file path
  moduleId   String
  module     Module        @relation(fields: [moduleId], references: [id])
  order      Int
  visibility ContentStatus @default(VISIBLE)
  Progress   Progress[]
}

enum ContentStatus {
  VISIBLE
  HIDDEN
  DELETED
}

model Enrollment {
  id         String           @id @default(uuid())
  userId     String
  courseId   String
  enrolledAt DateTime         @default(now())
  status     EnrollmentStatus @default(ENROLLED)

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

enum EnrollmentStatus {
  ENROLLED
  COMPLETED
  CANCELLED
}

model Progress {
  id          String         @id @default(uuid())
  userId      String
  lessonId    String
  completedAt DateTime       @default(now())
  status      ProgressStatus @default(COMPLETED)

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model Certificate {
  id             String            @id @default(uuid())
  userId         String
  courseId       String
  issuedAt       DateTime          @default(now())
  certificateUrl String?
  status         CertificateStatus @default(GENERATED)

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

enum CertificateStatus {
  GENERATED
  REVOKED
}

model Quiz {
  id          String        @id @default(uuid())
  title       String
  courseId    String
  course      Course        @relation(fields: [courseId], references: [id])
  questions   Question[]
  QuizAttempt QuizAttempt[]
}

model Question {
  id      String       @id @default(uuid())
  text    String
  type    QuestionType
  quizId  String
  quiz    Quiz         @relation(fields: [quizId], references: [id])
  options Option[]
  answer  String
}

enum QuestionType {
  MCQ
  SHORT_ANSWER
}

model Option {
  id         String   @id @default(uuid())
  text       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
}

model QuizAttempt {
  id          String        @id @default(uuid())
  userId      String
  quizId      String
  score       Float
  attemptedAt DateTime      @default(now())
  status      AttemptStatus @default(SUBMITTED)

  user User @relation(fields: [userId], references: [id])
  quiz Quiz @relation(fields: [quizId], references: [id])
}

enum AttemptStatus {
  PENDING
  SUBMITTED
  GRADED
}

model Review {
  id        String       @id @default(uuid())
  rating    Int
  comment   String
  userId    String
  courseId  String
  createdAt DateTime     @default(now())
  status    ReviewStatus @default(PENDING)

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}
